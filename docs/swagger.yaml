basePath: /v1
definitions:
  accounts.GetAccountResponse:
    properties:
      address:
        type: string
      birthday:
        type: string
      email:
        type: string
      firstName:
        type: string
      gender:
        $ref: '#/definitions/users.Gender'
      lastName:
        type: string
      photoUrl:
        type: string
    type: object
  accounts.UpdateAccountRequestPatch:
    properties:
      address:
        type: string
      birthday:
        type: string
      firstName:
        type: string
      gender:
        $ref: '#/definitions/users.Gender'
      lastName:
        type: string
    type: object
  accounts.UpdateAccountRequestPut:
    properties:
      address:
        type: string
      birthday:
        type: string
      firstName:
        type: string
      gender:
        allOf:
        - $ref: '#/definitions/users.Gender'
        enum:
        - male
        - female
      lastName:
        type: string
    required:
    - birthday
    - firstName
    - gender
    - lastName
    type: object
  accounts.UpdateAccountResponse:
    properties:
      address:
        type: string
      birthday:
        type: string
      email:
        type: string
      firstName:
        type: string
      gender:
        $ref: '#/definitions/users.Gender'
      lastName:
        type: string
      photoUrl:
        type: string
    type: object
  auth.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  auth.LoginResponse:
    properties:
      success:
        type: boolean
    type: object
  auth.RegisterRequest:
    properties:
      birthday:
        type: string
      email:
        type: string
      firstName:
        type: string
      gender:
        allOf:
        - $ref: '#/definitions/users.Gender'
        enum:
        - male
        - female
      lastName:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - birthday
    - email
    - firstName
    - gender
    - lastName
    - password
    type: object
  auth.RegisterResponse:
    properties:
      success:
        type: boolean
    type: object
  bands.BandResponse:
    description: Band response model
    properties:
      createdAt:
        type: string
      description:
        type: string
      genre:
        type: string
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
    type: object
  bands.CreateBandRequest:
    description: Create band request
    properties:
      description:
        type: string
      genre:
        maxLength: 100
        type: string
      name:
        maxLength: 255
        type: string
    required:
    - name
    type: object
  bands.ListBandsResponse:
    description: List bands response
    properties:
      items:
        items:
          $ref: '#/definitions/bands.BandResponse'
        type: array
    type: object
  bands.UpdateBandRequest:
    description: Update band request
    properties:
      description:
        type: string
      genre:
        maxLength: 100
        type: string
      name:
        maxLength: 255
        type: string
    type: object
  concerts.ConcertResponse:
    description: Concert response model
    properties:
      bands:
        items:
          $ref: '#/definitions/bands.BandResponse'
        type: array
      createdAt:
        type: string
      date:
        type: string
      description:
        type: string
      id:
        type: integer
      posterUrl:
        type: string
      title:
        type: string
      updatedAt:
        type: string
      venue:
        $ref: '#/definitions/venues.VenueResponse'
      venueId:
        type: integer
    type: object
  concerts.CreateConcertRequest:
    description: Create concert request
    properties:
      bandIds:
        items:
          type: integer
        minItems: 1
        type: array
      date:
        type: string
      description:
        maxLength: 300
        type: string
      posterUrl:
        maxLength: 100
        type: string
      title:
        maxLength: 100
        type: string
      venueId:
        type: integer
    required:
    - bandIds
    - date
    - title
    - venueId
    type: object
  concerts.ListConcertsResponse:
    description: List concerts response
    properties:
      items:
        items:
          $ref: '#/definitions/concerts.ConcertResponse'
        type: array
    type: object
  concerts.UpdateConcertRequest:
    description: Update concert request
    properties:
      bandIds:
        items:
          type: integer
        minItems: 1
        type: array
      date:
        type: string
      description:
        maxLength: 300
        type: string
      posterUrl:
        maxLength: 100
        type: string
      title:
        maxLength: 100
        type: string
      venueId:
        type: integer
    type: object
  users.Gender:
    enum:
    - male
    - female
    type: string
    x-enum-varnames:
    - Male
    - Female
  venues.CreateVenueRequest:
    description: Create venue request
    properties:
      address:
        maxLength: 50
        type: string
      description:
        maxLength: 300
        type: string
      email:
        maxLength: 50
        type: string
      name:
        maxLength: 100
        type: string
      phone:
        maxLength: 20
        type: string
    required:
    - address
    - name
    type: object
  venues.ListVenuesResponse:
    description: List venues response
    properties:
      items:
        items:
          $ref: '#/definitions/venues.VenueResponse'
        type: array
    type: object
  venues.UpdateVenueRequest:
    description: Update venue request
    properties:
      address:
        maxLength: 50
        type: string
      description:
        maxLength: 300
        type: string
      email:
        maxLength: 50
        type: string
      name:
        maxLength: 100
        type: string
      phone:
        maxLength: 20
        type: string
    type: object
  venues.VenueResponse:
    description: Venue response model
    properties:
      address:
        type: string
      createdAt:
        type: string
      description:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string
      updatedAt:
        type: string
    type: object
host: localhost:777
info:
  contact: {}
  description: This is a Concert booking application
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Concert booking API
  version: "1.0"
paths:
  /admin/bands:
    get:
      description: Get a paginated list of bands
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Page size (default: 10, max: 100)'
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/bands.ListBandsResponse'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
      summary: List bands
      tags:
      - Admin/Bands
    post:
      consumes:
      - application/json
      description: Create a new band with the provided details
      parameters:
      - description: Band details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/bands.CreateBandRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/bands.BandResponse'
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
      summary: Create a new band
      tags:
      - Admin/Bands
  /admin/bands/{id}:
    delete:
      description: Delete an existing band
      parameters:
      - description: Band ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
      summary: Delete a band
      tags:
      - Admin/Bands
    get:
      description: Get details of a specific band
      parameters:
      - description: Band ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/bands.BandResponse'
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not found
          schema:
            type: string
      summary: Get a band by ID
      tags:
      - Admin/Bands
    put:
      consumes:
      - application/json
      description: Update an existing band with the provided details
      parameters:
      - description: Band ID
        in: path
        name: id
        required: true
        type: integer
      - description: Band details to update
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/bands.UpdateBandRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/bands.BandResponse'
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not found
          schema:
            type: string
      summary: Update a band
      tags:
      - Admin/Bands
  /admin/concerts:
    get:
      description: Get a paginated list of concerts
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Page size (default: 10, max: 100)'
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/concerts.ListConcertsResponse'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
      summary: List concerts
      tags:
      - Admin/Concerts
    post:
      consumes:
      - application/json
      description: Create a new concert with the provided details
      parameters:
      - description: Concert details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/concerts.CreateConcertRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/concerts.ConcertResponse'
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
      summary: Create a new concert
      tags:
      - Admin/Concerts
  /admin/concerts/{id}:
    delete:
      description: Delete an existing concert
      parameters:
      - description: Concert ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
      summary: Delete a concert
      tags:
      - Admin/Concerts
    get:
      description: Get details of a specific concert
      parameters:
      - description: Concert ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/concerts.ConcertResponse'
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not found
          schema:
            type: string
      summary: Get a concert by ID
      tags:
      - Admin/Concerts
    put:
      consumes:
      - application/json
      description: Update an existing concert
      parameters:
      - description: Concert ID
        in: path
        name: id
        required: true
        type: integer
      - description: Concert details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/concerts.UpdateConcertRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/concerts.ConcertResponse'
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not found
          schema:
            type: string
      summary: Update a concert
      tags:
      - Admin/Concerts
  /admin/venues:
    get:
      description: Get a paginated list of venues
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Page size (default: 10, max: 100)'
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/venues.ListVenuesResponse'
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
      summary: List venues
      tags:
      - Admin/Venues
    post:
      consumes:
      - application/json
      description: Create a new venue with the provided details
      parameters:
      - description: Venue details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/venues.CreateVenueRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/venues.VenueResponse'
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
      summary: Create a new venue
      tags:
      - Admin/Venues
  /admin/venues/{id}:
    delete:
      description: Delete an existing venue
      parameters:
      - description: Venue ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
      summary: Delete a venue
      tags:
      - Admin/Venues
    get:
      description: Get details of a specific venue
      parameters:
      - description: Venue ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/venues.VenueResponse'
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not found
          schema:
            type: string
      summary: Get a venue by ID
      tags:
      - Admin/Venues
    put:
      consumes:
      - application/json
      description: Update an existing venue with the provided details
      parameters:
      - description: Venue ID
        in: path
        name: id
        required: true
        type: integer
      - description: Venue details to update
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/venues.UpdateVenueRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/venues.VenueResponse'
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not found
          schema:
            type: string
      summary: Update a venue
      tags:
      - Admin/Venues
  /uploads/{fileName}:
    get:
      description: Retrieve a file by its path for the authenticated user
      parameters:
      - description: File path (e.g., b60b4dd7-6dda-49fc-830f-020fa5fe4817.png)
        in: path
        name: fileName
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: File content
          schema:
            type: file
        "400":
          description: Invalid file path
          schema:
            type: string
        "401":
          description: Not authorized
          schema:
            type: string
        "403":
          description: Forbidden or file not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get a file by path
      tags:
      - Account
  /v1/account:
    get:
      description: Return information about current user
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/accounts.GetAccountResponse'
        "401":
          description: Not authorized
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get account info
      tags:
      - Account
    patch:
      consumes:
      - application/json
      description: Update specific fields of the current user's account
      parameters:
      - description: Fields to update
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/accounts.UpdateAccountRequestPatch'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/accounts.UpdateAccountResponse'
        "400":
          description: Invalid request body
          schema:
            type: string
        "401":
          description: Not authorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update account info
      tags:
      - Account
    put:
      consumes:
      - application/json
      description: Replace all fields of the current user's account with provided
        values
      parameters:
      - description: Full account details to update
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/accounts.UpdateAccountRequestPut'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/accounts.UpdateAccountResponse'
        "400":
          description: Invalid request body
          schema:
            type: string
        "401":
          description: Not authorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update full account info
      tags:
      - Account
  /v1/account/photo:
    post:
      consumes:
      - multipart/form-data
      description: Upload a photo file for the current user
      parameters:
      - description: Photo file to upload
        in: formData
        name: photo
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Not authorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Upload a photo
      tags:
      - Account
  /v1/auth/login:
    post:
      consumes:
      - application/json
      description: 'Login user, set token in cookie and return success: true'
      parameters:
      - description: LoginRequest credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged in
          schema:
            $ref: '#/definitions/auth.LoginResponse'
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Login a user
      tags:
      - auth
  /v1/auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user and return authentication token
      parameters:
      - description: Registration credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully registered
          schema:
            $ref: '#/definitions/auth.RegisterResponse'
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Register a new user
      tags:
      - auth
swagger: "2.0"
